#!/usr/bin/env node
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @fileoverview Node.js server that provides Google auth services to Code City.
 * @author fraser@google.com (Neil Fraser)
 */

'use strict';

var crypto = require('crypto');
var fs = require('fs');
var google = require('googleapis').google;
var http = require('http');
var URL = require('url').URL;

// Configuration constants.
const configFileName = 'loginServer.cfg';

// Global variables.
var CFG = null;
var oauth2Client;
var loginUrl;

const DEFAULT_CFG = {
  // Internal port for this HTTP server.  Nginx hides this from users.
  httpPort: 7781,
  // Absolute URL of login page.
  loginUrl: 'https://login.example.codecity.world/',
  // URL of connect page (absolute or relative).
  connectUrl: 'https://connect.example.codecity.world/',
  // URL of static folder (absolute or relative).
  staticUrl: 'https://static.example.codecity.world/',
  // Google's API client ID.
  clientId: '00000000000-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx' +
      '.apps.googleusercontent.com',
  // Google's API client secret.
  clientSecret: 'yyyyyyyyyyyyyyyyyyyyyyyy',
  // Root domain.
  cookieDomain: 'example.codecity.world',
  // Random password for cookie encryption and salt for login IDs.
  password: 'zzzzzzzzzzzzzzzz',
  // Regexp on email addresses that must pass to allow access.
  emailRegexp: '.*'
};


/**
 * Load a file from disk, add substitutions, and serve to the web.
 * @param {!Object} response HTTP server response object.
 * @param {string} filename Name of template file on disk.
 * @param {!Object} subs Hash of replacement strings.
 */
function serveFile(response, filename, subs) {
  fs.readFile(filename, 'utf8', function(err, data) {
    if (err) {
      console.log(err);
      response.statusCode = 500;
      data = 'Unable to load file: ' + filename + '\n' + err;
    } else {
      // Inject substitutions.
      for (var name in subs) {
        data = data.replace(new RegExp(name, 'g'), subs[name]);
      }
      response.statusCode = 200;
      response.setHeader('Content-Type', 'text/html');
    }
    // Serve page to user.
    response.end(data);
  });
}

/**
 * Handles HTTP requests from web server.
 * @param {!Object} request HTTP server request object
 * @param {!Object} response HTTP server response object.
 */
function handleRequest(request, response) {
  if (request.connection.remoteAddress !== '127.0.0.1') {
    // This check is redundant, the server is only accessible to
    // localhost connections.
    console.log(
        'Rejecting connection from ' + request.connection.remoteAddress);
    response.end('Connection rejected.');
    return;
  }

  var url = new URL(request.url, CFG.loginUrl);
  if (request.method === 'GET' && url.searchParams.has('close')) {
    // Serve up close.html to close the window.
    serveFile(response, 'close.html', {});
    return;
  }

  var code = url.searchParams.get('code');
  if (!code) {
    // No auth code?  Serve login.html.
    // Compute Google's login URL.
    var options = {scope: 'email'};
    if (url.searchParams.has('loginThenClose')) {
      options.state = 'autoclose';
    }
    var subs = {
      '<<<LOGIN_URL>>>': oauth2Client.generateAuthUrl(options),
      '<<<STATIC_URL>>>': CFG.staticUrl
    };
    serveFile(response, 'login.html', subs);
    return;
  }
  // Handle the result of a login.
  oauth2Client.getToken(code, function(err, tokens) {
    if (err) {
      console.log(err);
      response.statusCode = 500;
      response.end('Google Authentication fail: ' + err);
      return;
    }
    // Now tokens contains an access_token and an optional
    // refresh_token. Save them.
    oauth2Client.setCredentials(tokens);
    var oauth2Api = google.oauth2('v2');
    oauth2Api.userinfo.v2.me.get({auth: oauth2Client}, function(err, res) {
      if (err) {
        console.log(err);
        response.statusCode = 500;
        response.end('Google Userinfo fail: ' + err);
        return;
      }
      // Convert the Google ID into one unique for Code City.
      var id = CFG.password + res.data.id;
      id = crypto.createHash('sha512').update(id).digest('hex');
      // Create anti-tampering hash as checksum.
      var checksum = CFG.password + id;
      checksum = crypto.createHash('sha3-224').update(checksum).digest('hex');
      var emailRegexp = new RegExp(CFG.emailRegexp || '.*');
      // FYI: If present, res.data.hd contains the GSfE domain.
      // E.g. 'students.gissv.org', or 'sjsu.edu'.
      // We aren't using it now, but this might be used to filter users.
      if (emailRegexp.test(res.data.email)) {
        var state = url.searchParams.get('state');
        var domain = CFG.cookieDomain ? 'Domain=' + CFG.cookieDomain : '';
        var redirectUrl = (state === 'autoclose') ? '?close' : CFG.connectUrl;
        response.writeHead(302, {
          // Temporary redirect.
          'Set-Cookie': 'ID=' + id + '_' + checksum + '; HttpOnly;' + domain +
              '; Path=/',
          'Location': redirectUrl
        });
        response.end('Login OK.  Redirecting.');
        console.log('Accepted xxxx' + id.substring(id.length - 4));
      } else {
        response.statusCode = 403;
        response.end('Login denied.  Your email address (' + res.data.email +
            ') is not authorized.');
        console.log('Login denied.');
      }
    });
  });
}

/**
 * Read the JSON configuration file and return it.  If none is
 * present, write a stub and throw an error.
 */
function readConfigFile(filename) {
  let data;
  try {
    data = fs.readFileSync(filename, 'utf8');
  } catch (err) {
    console.log(`Configuration file ${filename} not found.  ` +
        'Creating new file.');
    data = JSON.stringify(DEFAULT_CFG, null, 2) + '\n';
    fs.writeFileSync(filename, data, 'utf8');
  }
  CFG = JSON.parse(data);
  if (!CFG.password || CFG.password === DEFAULT_CFG.password) {
    throw Error(
        `Configuration file ${filename} not configured.  ` +
        'Please edit this file.');
  }
  if (!CFG.loginUrl.endsWith('/')) CFG.loginUrl += '/';
  if (!CFG.connectUrl.endsWith('/')) CFG.connectUrl += '/';
  if (!CFG.staticUrl.endsWith('/')) CFG.staticUrl += '/';
}

/**
 * Initialize Google's authentication and start up the HTTP server.
 */
function startup() {
  readConfigFile(configFileName);

  // Create an authentication client for our interactions with Google.
  oauth2Client = new google.auth.OAuth2(
      CFG.clientId, CFG.clientSecret, CFG.loginUrl);

  // Start an HTTP server.
  var server = http.createServer(handleRequest);
  server.listen(CFG.httpPort, 'localhost', () => {
    console.log('Login server listening on port ' + CFG.httpPort);
  });
}

startup();
