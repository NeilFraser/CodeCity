/**
 * @license
 * Code City: Templating system for Code City.
 *
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @fileoverview JavaScript Server Pages for Code City.
 * @author frase@google.com (Neil Fraser)
 */

$.jssp = {};

$.jssp.compile = function(func) {
  var src = func.jssp;
  if (!src) {
    throw ReferenceError('jssp not found on function.');
  }
  var tokens = src.trim().split(/(<%(?:--|=)?|(?:--)?%>)/);
  var code = ["// DON'T EDIT THIS CODE: AUTOMATICALLY GENERATED BY JSSP."];
  var STATES = {
    LITERAL: 0,
    STATEMENT: 1,
    EXPRESSION: 2,
    COMMENT: 3
  };
  var state = STATES.LITERAL;
  var buffer = '';
  for (var i = 0; i < tokens.length; i++) {
    var token = tokens[i];
    if (!token) {
      continue;  // Empty string caused by splitting adjacent tags.
    }
    switch (state) {
      case STATES.LITERAL:
        var flush = true;
        if (token === '<%') {
          state = STATES.STATEMENT;
        } else if (token === '<%=') {
          state = STATES.EXPRESSION;
        } else if (token === '<%--') {
          state = STATES.COMMENT;
        } else {
          buffer += token;
          flush = false;
        }
        if (flush && buffer) {
          code.push('out.print(' + JSON.stringify(buffer) + ');');
          buffer = '';
        }
        break;
      case STATES.STATEMENT:
        if (token === '%>') {
          state = STATES.LITERAL;
          if (buffer) {
            code.push(buffer);
            buffer = '';
          }
        } else {
          buffer += token;
        }
        break;
      case STATES.EXPRESSION:
        if (token === '%>') {
          state = STATES.LITERAL;
          if (buffer) {
            code.push('out.print(' + buffer + ');');
            buffer = '';
          }
        } else {
          buffer += token;
        }
        break;
      case STATES.COMMENT:
        if (token === '--%>') {
          state = STATES.LITERAL;
        }
        break;
    }
  }
  if (state !== STATES.LITERAL) {
    throw SyntaxError('Unclosed JSSP tag.');
  }
  if (buffer) {
    code.push('out.print(' + JSON.stringify(buffer) + ');');
  }
  var code = '\n' + code.join('\n') + '\n';
  var newFunc = new Function('request, response, out', code);
  $.utils.transplantProperties(func, newFunc);
  return newFunc;
};

$.jssp.generateOutput = function(func, thisValue) {
  var request = {};
  var response = {};
  var out = new $.jssp.OutputBuffer();
  func.call(thisValue, request, response, out);
  return out.toString();
};

$.jssp.OutputBuffer = function() {
  this.buffer_ = '';
};

$.jssp.OutputBuffer.prototype.print = function(text) {
  this.buffer_ += text;
};

$.jssp.OutputBuffer.prototype.println = function(text) {
  this.buffer_ += text + '\n';
};

$.jssp.OutputBuffer.prototype.toString = function() {
  return this.buffer_;
};
