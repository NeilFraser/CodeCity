/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @fileoverview Web-based code explorer/editor for Code City.
 */

//////////////////////////////////////////////////////////////////////
// AUTO-GENERATED CODE FROM DUMP.  EDIT WITH CAUTION!
//////////////////////////////////////////////////////////////////////

$.www.code = {};
$.www.code.www = function jssp(request, response) {
  // DO NOT EDIT THIS CODE.  AUTOMATICALLY GENERATED BY JSSP.
  // To edit contents of generated page, edit this.source.
  return jssp.render(this, request, response);  // See $.Jssp for explanation.
};
Object.setPrototypeOf($.www.code.www, $.Jssp.prototype);
Object.setOwnerOf($.www.code.www, Object.getOwnerOf($.Jssp.OutputBuffer));
$.www.code.www.source = '<!DOCTYPE HTML Frameset DTD>\n<html>\n<head>\n  <title>Code City: Code</title>\n  <link href="/static/favicon.ico" rel="shortcut icon">\n  <script src="/static/code/common.js"></script>\n  <script src="/static/code/code.js"></script>\n</head>\n<frameset rows="40%,60%">\n  <frame id="explorer" src="/static/code/explorer.html" />\n  <frame id="editor" src="/static/code/editor.html" />\n</frameset>\n<noframes>Sorry, your browser does not support frames!</noframes>\n</html>';
$.www.code.www.hash_ = '708fb0b688088724b01bd2d30d0671d5v1.0.0';
$.www.code.www.compiled_ = function(request, response) {
// DO NOT EDIT THIS CODE: AUTOMATICALLY GENERATED BY JSSP.
response.write("<!DOCTYPE HTML Frameset DTD>\n<html>\n<head>\n  <title>Code City: Code</title>\n  <link href=\"/static/favicon.ico\" rel=\"shortcut icon\">\n  <script src=\"/static/code/common.js\"></script>\n  <script src=\"/static/code/code.js\"></script>\n</head>\n<frameset rows=\"40%,60%\">\n  <frame id=\"explorer\" src=\"/static/code/explorer.html\" />\n  <frame id=\"editor\" src=\"/static/code/editor.html\" />\n</frameset>\n<noframes>Sorry, your browser does not support frames!</noframes>\n</html>");
};
delete $.www.code.www.compiled_.name;
Object.setOwnerOf($.www.code.www.compiled_, Object.getOwnerOf($.Jssp.OutputBuffer));
Object.setOwnerOf($.www.code.www.compiled_.prototype, Object.getOwnerOf($.Jssp.OutputBuffer));
$.www.code.www.jssp = '<!DOCTYPE HTML Frameset DTD>\n<html>\n<head>\n  <title>Code City: Code</title>\n  <link href="/static/favicon.ico" rel="shortcut icon">\n  <script src="/static/code/common.js"></script>\n  <script src="/static/code/code.js"></script>\n</head>\n<frameset rows="40%,60%">\n  <frame id="explorer" src="/static/code/explorer.html" />\n  <frame id="editor" src="/static/code/editor.html" />\n</frameset>\n<noframes>Sorry, your browser does not support frames!</noframes>\n</html>';
$.www.code.objectPanel = {};
$.www.code.objectPanel.www = function code_objectPanel_www(request, response) {
  // HTTP handler for /code/objectPanel
  // Provide data for the IDE's object panels.
  // Takes one input: a JSON-encoded list of parts from the 'parts' parameter.
  // Prints a browser-executed JavaScript data assignment.
  var data = {};
  if (request.query) {
    var parts = new $.Selector(decodeURIComponent(request.query));
    try {
      var value = (new $.Selector(parts)).toValue();
    } catch (e) {
      // Parts don't match a valid path.
      $.system.log(String(e) + '\n' + e.stack);
      // TODO(fraser): Send an informative error message.
      data = null;
    }
    if (data) {
      // For simplicity, don't provide completions for primitives (despite
      // the fact that (for example) numbers inherit a '.toFixed' function).
      if (value && (typeof value === 'object' || typeof value === 'function')) {
        data.properties = [];
        while (value !== null && value !== undefined) {
          var ownProps = Object.getOwnPropertyNames(value);
          // Add typeof information.
          for (var i = 0; i < ownProps.length; i++) {
            var prop = ownProps[i];
            var type = this.getType(value[prop]);
            ownProps[i] = {name: prop, type: type};
          }
          data.properties.push(ownProps);
          value = Object.getPrototypeOf(value);
        }
        data.keywords = ['{proto}', '{owner}'];
        // Uncomment once Set, Map, WeakSet and WeakMap exist.
        //if (value instanceOf Set || value instanceOf WeakSet) {
        //  data.keywords.push('{keys}');
        //}
        //if (value instanceOf Map || value instanceOf WeakMap) {
        //  data.keywords.push('{keys}', '{values}');
        //}
      }
    }
  } else {
    data.roots = [];
    // Add typeof information.
    var global = $.utils.code.getGlobal();
    for (var name in global) {
      data.roots.push({name: name, type: this.getType(global[name])});
    }
  }
  response.setHeader('Content-Type', 'text/javascript; charset=utf-8');
  response.write('Code.ObjectPanel.data = ' + JSON.stringify(data, null, 2) + ';\n');
};
Object.setOwnerOf($.www.code.objectPanel.www, Object.getOwnerOf($.Jssp.OutputBuffer));
$.www.code.objectPanel.getType = function(value) {
  // Return a type string for a value.
  // E.g. 'string', 'object', 'array', 'boolean'.
  if (Array.isArray(value)) {
    return 'array';
  }
  if ((typeof value === 'function') && value.verb) {
    return 'verb';
  }
  return typeof value;
};
delete $.www.code.objectPanel.getType.name;
Object.setOwnerOf($.www.code.objectPanel.getType, Object.getOwnerOf($.servers.http.Request.prototype.parse));
$.www.code.editor = {};
$.www.code.editor.www = function code_editor_www(request, response) {
  // HTTP handler for /code/editor
  // Provide data for the IDE's editors.
  // Takes several inputs:
  // - selector: a selector to the origin object
  // - key: a temporary key to the origin object
  // - src: JavaScript source representation of new value,
  //   implies request to save
  // Writes JSON-encoded information about what is to be edited:
  // - key: a temporary key to the origin object
  // - src: JavaScript source representation of current value
  // - butter: short status message to be displayed to user
  // - saved: boolean indicating if a save was successful,
  //   only present if save was requested
  // - login: boolean indicating if the user is logged in
  var data = {login: !!request.user};
  try {  // ends with ... finally {response.write(JSON.stringify(data));}
    try {
      var selector = new $.Selector(decodeURIComponent(request.parameters.selector));
    } catch (e) {
      data.butter = 'Invalid selector: ' + String(e);
      return;
    }

    // Populate the (original) value object in the reverse-lookup db.
    selector.toValue(/*save:*/true);

    // Get Binding being edited.
    var object;
    var part = selector[selector.length - 1];
    if (selector.isVar()) {
      // Global variable; no parent object.
      object = null;
    } else if (request.parameters.key &&
               (object = $.db.tempId.getObjById(request.parameters.key))) {
      // Successfully retrieved parent object from tempID DB.
    } else {
      // Get parent object via selector.
      var parent = new $.Selector(selector.slice(0, -1));
      // Populatee parent object in the reverse-lookup db.
      parent.toValue(/*save:*/true);
      try {
        object = parent.toValue(/*save:*/true);
      } catch (e) {
        data.butter = e.message;
        return;
      }
			if (!$.utils.isObject(object)) {
        data.butter = String(parent) + ' is not an object';
        return;
      }
      // Save parent object in tempId DB; send key to client.
      data.key = $.db.tempId.storeObj(object);
    }
    var binding = new $.utils.Binding(object, part);

    // Save changes.
    if (request.parameters.src) {
      data.saved = false;
      this.save(request.parameters.src, binding, data, request.user);
    }

    // Load revised source.
    data.src = this.load(binding);
  } finally {
    response.write(JSON.stringify(data));
  }
};
Object.setOwnerOf($.www.code.editor.www, Object.getOwnerOf($.servers.http.Request.prototype.parse));
$.www.code.editor.handleMetaData = function handleMetaData(src, oldValue, newValue) {
	// Parse metadata directives from src and apply to newValue.
  //
  // The $.www.code.editor.www sends values to be edited to the editor
  // front-end encoded as JavaScript expressions, optionally preceded
  // by comments containing metadata about the value.  The editor can
  // in turn return metadata directives which will be carried out by
  // this function.
  //
  // Supported directives (order matters for now):
  // // @copy_properties true
  //    - Copy (most) properties from oldValue to newValue, if both
  //      are objects.
  // // @hash 26076758802
  //    - Warn if old value doesn't hash to this value (conflicting
  //      change happened between load and save).
  // // @delete_prop <name>
  //    - Delete the named property from newValue.
  // // @set_prop <name> <value>
  //    - Set the named property of newValue to the specified value.
  //
  // Throws user-printed strings (not Errors) if unable to complete.
  var m = src.match(/^(?:[ \t]*(?:\/\/[^\n]*)?\n)+/);
  if (!m) {
    return;
  }
  var metaLines = m[0].split('\n');
  for (var i = 0; i < metaLines.length; i++) {
    var meta = metaLines[i];
    if (meta.match(/^\s*\/\/\s*@copy_properties\s+true\s*$/)) {
      // @copy_properties true
      if (!$.utils.isObject(newValue)) {
        throw "Can't copy properties onto primitive: " + newValue;
      }
      // Silently ignore if the old value is a primitive.
      if ($.utils.isObject(oldValue)) {
        $.utils.object.transplantProperties(oldValue, newValue);
      }
    } else if ((m = meta.match(/^\s*\/\/\s*@hash\s+(\S+)\s*$/))) {
      // @hash 26076758802
      var oldSource = $.utils.code.toSource(oldValue);
      var hash = $.utils.string.hash('md5', oldSource);
      if (String(hash) !== m[1]) {
        // The current value does not match the value when the editor was loaded.
        // This means the value changed out from under the editor.
        throw 'Collision: Out of date editor.';
      }
    } else if ((m = meta.match(/^\s*\/\/\s*@delete_prop\s+(\S+)\s*$/))) {
      // @delete_prop dobj
      try {
        delete newValue[m[1]];
      } catch (e) {
        throw "Can't delete '" + m[1] + "' property.";
      }
    } else if ((m = meta.match(/^\s*\/\/\s*@set_prop\s+(\S+)\s*=(.+)$/))) {
      // @set_prop dobj = "this"
      try {
        var propValue = JSON.parse(m[2]);
      } catch (e) {
        throw "Can't parse '" + m[1] + "' value: " + m[2];
      }
      try {
        newValue[m[1]] = propValue;
      } catch (e) {
        throw "Can't set '" + m[1] + "' property.";
      }
    }
  }
};
Object.setOwnerOf($.www.code.editor.handleMetaData, Object.getOwnerOf($.Jssp.OutputBuffer));
$.www.code.editor.save = function $_www_code_editor_save(src, binding, data, user) {
  // Save changes by evalling src, doing post-processing as directed
  // by metadata, and then calling binding.set(/* new value */).
  // Sets data.saved and data.butter as appropriate to give feedback
  // to user.
  if (!user) {
    data.butter = 'User not logged in.';
    return;
  }
  setPerms(user);
  var saveValue;
  try {
    suspend();
    var expr = $.utils.code.rewriteForEval(src, /* forceExpression= */ true);
    // Evaluate src in global scope (eval by any other name, literally).
    var evalGlobal = eval;
    saveValue = evalGlobal(expr);
  } catch (e) {
    // TODO(fraser): Send a more informative error message.
    data.butter = String(e);
    return;
  }
  var oldValue = binding.get();
  try {
    $.www.code.editor.handleMetaData(src, oldValue, saveValue);
  } catch (e) {
    if (typeof e === 'string') {
      // A thrown string should just be printed to the user.
      data.butter = e;
      return;
    } else {
      throw e;  // Rethrow real errors.
    }
  }
  // Record last modification data on functions.
  if (typeof saveValue === 'function') {
    saveValue.lastModifiedTime = Date.now();
    saveValue.lastModifiedUser = user;
  }
  try {
    binding.set(saveValue);
  } catch (e) {
    data.butter = String(e);
    return;
  }
  data.saved = true;
  if (binding.isProto()) {
    data.butter = 'Prototype Set';
  } else if (binding.isOwner()) {
    data.butter = 'Owner Set';
  } else {
    data.butter = 'Saved';
  }
};
Object.setOwnerOf($.www.code.editor.save, {});
$.www.code.editor.generateMetaData = function generateMetaData(value) {
  // Assemble any meta-data for the editor.
  var meta = '';
  if ($.utils.isObject(value)) {
    // TODO: add @copy_properties here, but not if the source code is a selector?
  }
  if (typeof value === 'function') {
    meta += '// @copy_properties true\n';
    if (value.lastModifiedTime) {
      meta += '// @last_modified_time ' + value.lastModifiedTime + '\n';
    }
    if (value.lastModifiedUser) {
      meta += '// @last_modified_user ' + String(value.lastModifiedUser) + '\n';
    }
    var src = $.utils.code.toSource(value);
    meta += '// @hash ' + $.utils.string.hash('md5', src) + '\n';
    var props = ['verb', 'dobj', 'prep', 'iobj'];
    for (var i = 0, prop; (prop = props[i]); i++) {
      try {
        meta += '// ' + (value[prop] ? '@set_prop ' + prop + ' = ' +
            JSON.stringify(value[prop]) : '@delete_prop ' + prop) + '\n';
      } catch (e) {
        // Unstringable value, or read perms error.  Skip.
      }
    }
  }
	return meta;
};
Object.setOwnerOf($.www.code.editor.generateMetaData, Object.getOwnerOf($.Jssp.OutputBuffer));
$.www.code.editor.load = function load(binding) {
  // The complement of save: render the current value of binding as a
  // string, prefixed with metadata, postfixed with type information.
  //
  // This should return a string which, when passed eval, will be (in
  // order of preference):
  //
  // - Identical to (as determined by Object.is) the current value,
  // - A shallow-copy of the current value, or
  // - Unparsable, such that eval will throw SyntaxError.
  //
  // The intention should be that it should be safe to save witout
  // having made any changes and be reasonably confident nothing will
  // break.
  //
  // Args:
  // - binding: a $.utils.Binding for the binding being edited.
  var value = binding.get();
  try {
    var src = this.generateMetaData(value) + $.utils.code.toSource(value);
    if (!$.utils.isObject(value)) return src;
    var proto = Object.getPrototypeOf(value);
    if (typeof value === 'function' && proto === Function.prototype) return src;
    // Append type information.
    src += '  // ' + Object.prototype.toString.call(value);
    if (proto === null) {
      src += ' with prototype null';
    } else {
      var protoSelector = $.Selector.for(proto);
      if (protoSelector) {
        src += ' with prototype ' + protoSelector.toString();
      }
    }
    return src;
  } catch (e) {
    return '[' + e.name + ': ' + e.message + ']';
  }
};
Object.setOwnerOf($.www.code.editor.load, Object.getOwnerOf($.Jssp.OutputBuffer));

$.www['/code'] = $.www.code;

$.www['/code/editor'] = $.www.code.editor;

$.www['/code/objectPanel'] = $.www.code.objectPanel;

